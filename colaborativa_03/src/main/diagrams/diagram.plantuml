@startuml
class Elevador {
    - estado: ElevadorEstado
    - estrategia: EstrategiaAtendimento
    - filaDeRequisicoes: List<Integer>
    - observadores: List<Observer>
    + getInstancia(): Elevador
    + adicionarRequisicao(andar: int)
    + abrirPorta()
    + fecharPorta()
    + mover()
    + setEstado(estado: ElevadorEstado)
    + setEstrategia(estrategia: EstrategiaAtendimento)
    + addObserver(observer: Observer)
    + moverParaAndar(andar: int)
    + getAndarAtual(): int
    + getFilaDeRequisicoes(): List<Integer>
    + chegouAoDestino(): boolean
    + atualizarAndar()
    + setStatus(status: String)
}

interface ElevadorEstado {
    + acionarBotao(andar: int)
    + abrirPorta()
    + fecharPorta()
    + mover()
}

ElevadorEstado <|-- ElevadorSubindo
ElevadorEstado <|-- ElevadorDescendo
ElevadorEstado <|-- ElevadorParado

interface EstrategiaAtendimento {
    + processarFila(elevador: Elevador)
}

EstrategiaAtendimento <|-- EstrategiaSubindo
EstrategiaAtendimento <|-- EstrategiaDescendo

interface Observer {
    + atualizar(andarAtual: int, status: String, fila: List<Integer>)
}

Observer <|-- PainelElevador

class BotaoChamadaExterna {
    - andar: int
    - controle: CentralDeControleElevador
    + chamarElevador()
}

class BotaoInterno {
    - andar: int
    - controle: CentralDeControleElevador
    + selecionarAndar()
}

class PainelInterno {
    - botoesInternos: Map<Integer, BotaoInterno>
    + pressionarBotao(andar: int)
}

class CentralDeControleElevador {
    + acionarBotaoAndar(andar: int)
    + abrirPorta()
    + fecharPorta()
    + moverElevador()
}

Elevador --> Observer
Elevador --> ElevadorEstado
Elevador --> EstrategiaAtendimento
Observer <|-- PainelElevador
Elevador --> CentralDeControleElevador
CentralDeControleElevador --> PainelElevador
CentralDeControleElevador --> Elevador
CentralDeControleElevador --> BotaoChamadaExterna
CentralDeControleElevador --> BotaoInterno
PainelInterno --> BotaoInterno
PainelInterno --> Elevador
@enduml
